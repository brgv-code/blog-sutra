// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  //password reset
  passwordResets PasswordReset[]
  securityEvents SecurityEvent[]
  @@unique([email])
  @@map("user")
}



model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model PasswordReset {
  id        String @id @default(cuid())
  token     String @unique
  tokenHash String @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId, expiresAt])
  @@map("password_resets")
}

model SecurityEvent {
  id          String      @id @default(cuid())
  userId      String?
  eventType   String //'password_reset_requested',  'password_reset_completed', etc.
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  success     Boolean     @default(true)
  createdAt   DateTime    @default(now())

  user        User? @relation(fields:[userId],references:[id], onDelete: SetNull)

  @@index([userId, eventType])
  @@index([createdAt])
  @@map("security_events")
}

model RateLimitEntry {
  id              String      @id @default(cuid())
  identifier      String      //email or IP address
  action          String      //'password_reset_request'
  attempts        Int         @default(1)
  windowStart     DateTime    @default(now())
  expiresAt       DateTime


  @@unique([identifier, action])
  @@index(expiresAt)
  @@map("rate_limit_entries")
}

